AWSTemplateFormatVersion: 2010-09-09
Description: cloudformation sample building wordpress
Parameters:
  NamePrefix:
    Description: Prefix for resource Name to identify
    Type: String
    Default: cf-demo-wordpress
  InstanceType:
    Description: demo server instance InstanceType
    Type: String
    Default: t2.micro
  DbName:
    Description: demo RDS DB name (initial DB)
    Type: String
    Default: cfdemo
  DbId:
    Description: demo RDS instance Identifier
    Type: String
    Default: cf-demo-db
  DbInstanceClass:
    Description: demo RDS instance Instance class
    Type: String
    Default: db.t2.micro
  DbAllocationStorage:
    Description: demo RDS instance allocation storage
    Type: Number
    Default: 20
  DbMasterUserName:
    Description: demo RDS instance master user name
    Type: String
    Default: shigemi
  DbMasterPassword:
    Description: demo RDS instance master user password
    Type: String
    Default: demodemodemo
  DbMultiAz:
    Description: whether multi AZ or not
    Type: String
    Default: false
  AmiId:
    Description: AMI ID for test instance
    Type: String
    # us-east-1 amazonlinux2 ami
    Default: ami-0c6b1d09930fac512
  SshKey:
    Description: ssh key name for test server
    Type: String
    Default: shigemi
  MyIp:
    Description: "IP CIDR which allow access to server"
    Type : String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
  VpcCidr:
    Description: CIDR Block for Vpc
    Type : String
    MinLength: 9
    MaxLength: 18
    Default: 10.0.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Vpc]]
  SubnetPublic0:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 0, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Public-0]]
  SubnetPublic1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 1, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Public-1]]
  SubnetPrivate0:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 2, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Private-0]]
  SubnetPrivate1:
    Type: AWS::EC2::Subnet
    DependsOn: Vpc
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      VpcId: !Ref Vpc
      CidrBlock: !Select [ 3, !Cidr [ !GetAtt Vpc.CidrBlock, 4, 8 ]]
      MapPublicIpOnLaunch: Yes
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Private-1]]
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Internet-Gateway]]
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Public]]
  RouteToInternet:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  RouteTableAssociationPublic0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic0
      RouteTableId: !Ref RouteTablePublic
  RouteTableAssociationPublic1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPublic1
      RouteTableId: !Ref RouteTablePublic
  ElasticIpNatGateway:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIpNatGateway.AllocationId
      SubnetId: !Ref SubnetPublic0
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Nat-Gateway]]
  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, Private]]
  RouteToNatGateway:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway
  RouteTableAssociationPrivate0:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate0
      RouteTableId: !Ref RouteTablePrivate
  RouteTableAssociationPrivate1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetPrivate1
      RouteTableId: !Ref RouteTablePrivate
  SecurityGroupAlb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref AWS::StackName
          - lb
      GroupDescription: CloudFormation Managed
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, lb]]
  SecurityGroupAp:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref AWS::StackName
          - ap
      GroupDescription: CloudFormation Managed
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !GetAtt Vpc.CidrBlock
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, ap]]
  SecurityGroupDb:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join
        - '-'
        - - !Ref AWS::StackName
          - db
      GroupDescription: CloudFormation Managed
      VpcId: !Ref Vpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          CidrIp: !GetAtt Vpc.CidrBlock
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, db]]
  DB:
    Type: 'AWS::RDS::DBInstance'
    DependsOn:
      - SecurityGroupDb
      - SubnetGroupDb
    Properties:
      AllocatedStorage: !Ref DbAllocationStorage
      AutoMinorVersionUpgrade: 'false'
      VPCSecurityGroups:
        - !Ref SecurityGroupDb
      DBName: !Ref DbName
      BackupRetentionPeriod: '7'
      DBInstanceIdentifier: !Ref DbId
      DBInstanceClass: !Ref DbInstanceClass
      DBSubnetGroupName: !Ref SubnetGroupDb
      Engine: mysql
      EngineVersion: 5.6.41
      MasterUsername: !Ref DbMasterUserName
      MasterUserPassword: !Ref DbMasterPassword
      MultiAZ: !Ref DbMultiAz
      StorageType: gp2
  SubnetGroupDb:
    Type: 'AWS::RDS::DBSubnetGroup'
    Properties:
      DBSubnetGroupDescription: Source subnet
      SubnetIds:
        - !Ref SubnetPrivate0
        - !Ref SubnetPrivate1
  EC2Ap:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref SshKey
      ImageId: !Ref AmiId
      InstanceType: !Ref InstanceType
      Monitoring: false
      SubnetId: !Ref SubnetPublic0
      SecurityGroupIds:
        - !Ref SecurityGroupAp
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref NamePrefix, ap]]
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -xv
            DB_HOST=${DB_HOST}
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            WP_ACCESS_RANGE=10.0.0.0/255.255.0.0
            WP_PASSWORD=CXQwJxMXT4sB
            yum update -y
            yum install -y httpd mariadb
            amazon-linux-extras install php7.2
            yum install php-mysqlnd
            cat << DDL > /opt/wordpress.ddl
            CREATE DATABASE wordpress;
            GRANT ALL PRIVILEGES ON wordpress.* TO "wordpressuser"@"$WP_ACCESS_RANGE" IDENTIFIED BY "$WP_PASSWORD";
            FLUSH PRIVILEGES;
            EXIT
            DDL
            mysql -h $DB_HOST -u $DB_USER --password=$DB_PASSWORD < /opt/wordpress.ddl
            curl https://wordpress.org/latest.tar.gz | tar -zx
            mv wordpress /var/www/
            function random_string(){
              head -c $(( $1 * 3/2 )) /dev/urandom | \
              base64 | \
              head -c $1
            }
            cat <<EOL > /var/www/wordpress/wp-config.php
            <?php
            // ** MySQL settings - You can get this info from your web host ** //
            /** The name of the database for WordPress */
            define( 'DB_NAME', 'wordpress' );
            /** MySQL database username */
            define( 'DB_USER', 'wordpressuser' );
            /** MySQL database password */
            define( 'DB_PASSWORD', '$WP_PASSWORD' );
            /** MySQL hostname */
            define( 'DB_HOST', '$DB_HOST' );
            /** Database Charset to use in creating database tables. */
            define( 'DB_CHARSET', 'utf8mb4' );
            /** The Database Collate type. Don't change this if in doubt. */
            define( 'DB_COLLATE', '' );
            /**#@+
             * Authentication Unique Keys and Salts.
             *
             * Change these to different unique phrases!
             * You can generate these using the {@link https://api.wordpress.org/secret-key/1.1/salt/ WordPress.org secret-key service}
             * You can change these at any point in time to invalidate all existing cookies. This will force all users to have to log in again.
             *
             * @since 2.6.0
             */
            define( 'AUTH_KEY',         '$(random_string 64)' );
            define( 'SECURE_AUTH_KEY',  '$(random_string 64)' );
            define( 'LOGGED_IN_KEY',    '$(random_string 64)' );
            define( 'NONCE_KEY',        '$(random_string 64)' );
            define( 'AUTH_SALT',        '$(random_string 64)' );
            define( 'SECURE_AUTH_SALT', '$(random_string 64)' );
            define( 'LOGGED_IN_SALT',   '$(random_string 64)' );
            define( 'NONCE_SALT',       '$(random_string 64)' );
            EOL
            cat <<'EOL' >> /var/www/wordpress/wp-config.php
            /**
             * WordPress Database Table prefix.
             */
            $table_prefix = 'wp_';
            /**
             * For developers: WordPress debugging mode.
             */
            define( 'WP_DEBUG', false );
            /* That's all, stop editing! Happy publishing. */
            /** Absolute path to the WordPress directory. */
            if ( ! defined( 'ABSPATH' ) ) {
            	define( 'ABSPATH', dirname( __FILE__ ) . '/' );
            }
            /** Sets up WordPress vars and included files. */
            require_once( ABSPATH . 'wp-settings.php' );
            EOL
            chown -R apache:apache /var/www/wordpress
            sed --in-place  's%^DocumentRoot "/var/www/html"%DocumentRoot "/var/www/wordpress"%' /etc/httpd/conf/httpd.conf
            sed --in-place  's%^<Directory "/var/www">%<Directory "/var/www/wordpress">%' /etc/httpd/conf/httpd.conf
            sed --in-place -r '/^<Directory "\/var\/www\/wordpress">/,/^<\/Directory>/ s/.*AllowOverride None/    AllowOverride All/' /etc/httpd/conf/httpd.conf
            systemctl daemon-reload
            systemctl start httpd
            systemctl enable httpd
          - DB_HOST:
              Fn::GetAtt:
                - DB
                - Endpoint.Address
            DB_USER: !Ref DbMasterUserName
            DB_PASSWORD: !Ref DbMasterPassword
  Alb:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: !Join
        - '-'
        - - !Ref NamePrefix
          - lb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroupAlb
      Subnets:
        - !Ref SubnetPublic0
        - !Ref SubnetPublic1
      Type: application
  AlbListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    DependsOn:
      - AlbTargetGroup
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroup
      LoadBalancerArn: !Ref Alb
      Port: '80'
      Protocol: HTTP
  AlbTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn:
      - Alb
    Properties:
      TargetType: instance
      HealthCheckIntervalSeconds: 6
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: !Join
        - '-'
        - - !Ref NamePrefix
          - lb
      Port: '80'
      Protocol: HTTP
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: '60'
      TargetType: instance
      Targets:
        - Id: !Ref EC2Ap
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc
Outputs:
  WordPressUrl:
    Description: URL to access wordpress
    Value: !Join
      - ''
      - - 'http://'
        - !GetAtt
          - Alb
          - DNSName
